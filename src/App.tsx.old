import * as THREE from 'three';
import { useEffect, useRef, useState } from 'react';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import Stats from 'three/examples/jsm/libs/stats.module';
import { GUI } from 'three/examples/jsm/libs/lil-gui.module.min';

function makeInstance(
  geometry: THREE.BoxGeometry,
  color: THREE.ColorRepresentation,
  position: THREE.Vector3
) {
  const material = new THREE.MeshPhongMaterial({ color });
  const cube = new THREE.Mesh(geometry, material);
  cube.position.set(position.x, position.y, position.z);
  return cube;
}

function App() {
  const containerRef = useRef<HTMLDivElement>(null);
  const [renderer, setRenderer] = useState(
    new THREE.WebGLRenderer({
      antialias: true,
    })
  );

  const initCamera = () => {
    const camera = new THREE.PerspectiveCamera(
      45,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.set(-50, 100, 50);
    camera.lookAt(0, 0, 0);
    return camera;
  };

  const initGui = () => {
    const gui = new GUI();
    gui.domElement.style.right = '0px';
    gui.domElement.style.width = '300px';
    return gui;
  };

  const addLight = (): [THREE.DirectionalLight, THREE.DirectionalLightHelper] => {
    const color = 0xffffff;
    const intensity = 1;
    const light = new THREE.DirectionalLight(color, intensity);
    light.position.set(50, 50, 50);
    light.lookAt(0, 0, 0);
    const lightHelper = new THREE.DirectionalLightHelper(light);
    return [light, lightHelper];
  };

  const addLine = () => {
    const material = new THREE.LineBasicMaterial({ color: 0x0000ff });
    const points = [];
    points.push(new THREE.Vector3(-10, 0, 0));
    points.push(new THREE.Vector3(0, 10, 0));
    points.push(new THREE.Vector3(10, 0, 0));
    const geometry = new THREE.BufferGeometry().setFromPoints(points);
    const line = new THREE.Line(geometry, material);
    return line;
  };

  const init = () => {
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x444444, 1);
    const scene = new THREE.Scene();
    const camera = initCamera();
    const lights = addLight();
    const geometry = new THREE.BoxGeometry(10, 10, 10);
    const cubes: ReturnType<typeof makeInstance>[] = [];
    for (let i = -2; i < 3; i++) {
      for (let j = -2; j < 3; j++) {
        const pos = new THREE.Vector3(i * 20, 0, j * 20);
        const cube = makeInstance(geometry, (0x44aa88 >> i) << j, pos);
        cubes.push(cube);
      }
    }
    const axesHelper = new THREE.AxesHelper(20);
    scene.add(...cubes);
    scene.add(...lights);
    scene.add(axesHelper);
    const stats = new Stats();
    document.body.appendChild(stats.dom);
    function animate(time: number) {
      requestAnimationFrame(animate);
      time *= 0.001; // 将时间单位变为秒

      cubes.forEach((cube, ndx) => {
        const speed = 1 + ndx * 0.1;
        const rot = time * speed;
        cube.rotation.x = rot;
        cube.rotation.y = rot;
      });
      stats.update();
      renderer.render(scene, camera);
    }
    if (containerRef.current) {
      containerRef.current.innerHTML = '';
      containerRef.current?.appendChild(renderer.domElement);
      animate(1);
    }
    const controls = new OrbitControls(camera, renderer.domElement);
    // 如果OrbitControls改变了相机参数，重新调用渲染器渲染三维场景
    controls.addEventListener('change', function () {
      renderer.render(scene, camera); //执行渲染操作
    }); //监听鼠标、键盘事件

    window.onresize = () => {
      if (containerRef.current) {
        renderer.setSize(containerRef.current?.offsetWidth, containerRef.current?.offsetHeight);
        camera.aspect = containerRef.current?.offsetWidth / containerRef.current?.offsetHeight;
        camera.updateProjectionMatrix();
      }
    };

    const gui = initGui();
    gui.add(lights[0], 'intensity', 0, 5);
    gui.add(lights[0].position, 'x', -100, 100);
    gui.add(lights[0].position, 'y', -100, 100);
    gui.add(lights[0].position, 'z', -100, 100);
  };

  useEffect(() => {
    init();
  });

  return <div ref={containerRef} className="App h-full w-full"></div>;
}

export default App;
